/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eq.point.of.sale.system;

import eq.point.of.sale.system.DBConnection.DBConnection;
import com.sun.jdi.connect.spi.Connection;
import eq.point.of.sale.system.Queries.PointOfSale;
import static eq.point.of.sale.system.Queries.PointOfSale.rs;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import java.util.List;
import java.util.Map;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

//import net.sf.jasperreports.engine.xml.JRXmlLoader;
/**
 *
 * @author billy
 */
public class frmPointOfSale extends javax.swing.JPanel {

    PointOfSale db = new PointOfSale();
    DBConnection DBcon = new DBConnection("localhost", "3306", "eqpos", "root", "001995234");
    String Product_ID;
    Connection conn;

    /**
     * Creates new form frmPointOfSale
     */
    public frmPointOfSale() {
        initComponents();
        RefreshtblProducts();
        GetCustomers();
        JTableProduct();
        JTableProductOrder();
        cbCustomers.setSelectedIndex(-1);

//        Connection conn=db.connection("localhost", "eqpos", "root", "");
        //conn = (Connection) koneksi.getKoneksi("localhost", "3306", "root", "", "eqpos");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Top = new javax.swing.JPanel();
        Left = new javax.swing.JPanel();
        Buttom = new javax.swing.JPanel();
        Right = new javax.swing.JPanel();
        Center = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducs = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        cbCustomers = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnNewTransaction = new javax.swing.JButton();
        btnPlaceOrder = new javax.swing.JButton();
        btnNewTransaction2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnRemoveOrder = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        btnPayLogs = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout TopLayout = new javax.swing.GroupLayout(Top);
        Top.setLayout(TopLayout);
        TopLayout.setHorizontalGroup(
            TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1367, Short.MAX_VALUE)
        );
        TopLayout.setVerticalGroup(
            TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        jPanel1.add(Top, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout LeftLayout = new javax.swing.GroupLayout(Left);
        Left.setLayout(LeftLayout);
        LeftLayout.setHorizontalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        LeftLayout.setVerticalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
        );

        jPanel1.add(Left, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout ButtomLayout = new javax.swing.GroupLayout(Buttom);
        Buttom.setLayout(ButtomLayout);
        ButtomLayout.setHorizontalGroup(
            ButtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1351, Short.MAX_VALUE)
        );
        ButtomLayout.setVerticalGroup(
            ButtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        jPanel1.add(Buttom, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout RightLayout = new javax.swing.GroupLayout(Right);
        Right.setLayout(RightLayout);
        RightLayout.setHorizontalGroup(
            RightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        RightLayout.setVerticalGroup(
            RightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
        );

        jPanel1.add(Right, java.awt.BorderLayout.LINE_END);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setText("Order List Table");

        txtSearch.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        tblProducs.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tblProducs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProducs.setAutoscrolls(false);
        tblProducs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblProducs.setRowHeight(30);
        tblProducs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProducsMouseClicked(evt);
            }
        });
        tblProducs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblProducsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducs);

        tblOrders.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qty", "UnitOfMeasure", "Description", "Price", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrders.setRowHeight(30);
        jScrollPane2.setViewportView(tblOrders);

        cbCustomers.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        cbCustomers.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbCustomersPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cbCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbCustomersMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cbCustomersMouseEntered(evt);
            }
        });
        cbCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCustomersActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setText("Customer:");

        btnNewTransaction.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnNewTransaction.setText("New Transaction");
        btnNewTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewTransactionActionPerformed(evt);
            }
        });

        btnPlaceOrder.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnPlaceOrder.setText("Place Order");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        btnNewTransaction2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnNewTransaction2.setText("Pay");
        btnNewTransaction2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewTransaction2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setText("Total Price :");

        lblTotal.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        lblTotal.setForeground(java.awt.Color.red);
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setText("0.0");

        btnRemoveOrder.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnRemoveOrder.setText("Remove Order");
        btnRemoveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Search :");

        lblMessage.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblMessage.setForeground(new java.awt.Color(255, 0, 0));
        lblMessage.setText("         ");

        btnPayLogs.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnPayLogs.setText("logs");
        btnPayLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayLogsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CenterLayout = new javax.swing.GroupLayout(Center);
        Center.setLayout(CenterLayout);
        CenterLayout.setHorizontalGroup(
            CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CenterLayout.createSequentialGroup()
                        .addComponent(btnNewTransaction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPlaceOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNewTransaction2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPayLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(459, 459, 459))
                    .addGroup(CenterLayout.createSequentialGroup()
                        .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                            .addGroup(CenterLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(37, 37, 37)
                                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(CenterLayout.createSequentialGroup()
                                        .addComponent(cbCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblMessage)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CenterLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(32, 32, 32)
                                .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                            .addGroup(CenterLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))))
        );
        CenterLayout.setVerticalGroup(
            CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CenterLayout.createSequentialGroup()
                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CenterLayout.createSequentialGroup()
                        .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotal)
                            .addGroup(CenterLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(CenterLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(lblMessage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
                .addGap(52, 52, 52)
                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNewTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNewTransaction2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPayLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPlaceOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel1.add(Center, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public final void JTableProduct() {

        tblProducs.setDefaultEditor(Object.class, null);
        TableColumnModel tcm = tblProducs.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(70);
        tcm.getColumn(1).setPreferredWidth(70);
        tcm.getColumn(2).setPreferredWidth(400);
        tcm.getColumn(3).setPreferredWidth(50);
        tblProducs.changeSelection(0, 0, false, false);
    }

    public final void JTableProductOrder() {
        tblOrders.setDefaultEditor(Object.class, null);
        TableColumnModel tcm = tblOrders.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(50);
        tcm.getColumn(1).setPreferredWidth(100);
        tcm.getColumn(2).setPreferredWidth(400);
        tcm.getColumn(3).setPreferredWidth(50);
        tcm.getColumn(4).setPreferredWidth(50);
    }

    public final void eqPrint() {
//        JProgressBar progressbar;
//        progressbar=new JProgressBar(0, task.getlengthOfTask());
//        progressbar.setValue(0);
//        progressbar.setStringPainted(true);

        List lista = new ArrayList();
        for (int i = 0; i < tblOrders.getRowCount(); i++) {
            PrintReceipt pr = new PrintReceipt(tblOrders.getValueAt(i, 0).toString(), tblOrders.getValueAt(i, 1).toString(), tblOrders.getValueAt(i, 2).toString(), tblOrders.getValueAt(i, 3).toString(), tblOrders.getValueAt(i, 4).toString());
            lista.add(pr);

        }
        try {
            DBcon.Open();
            //db.Open();
            db.customerAddress(cbCustomers.getSelectedItem().toString());
            if (rs.next()) {

                JasperReport reporte = (JasperReport) JRLoader.loadObjectFromFile("src\\eq\\point\\of\\sale\\system\\eqPrint.jasper");
                Map parameter = new HashMap();
                parameter.put("address", rs.getString(1));
                parameter.put("total", lblTotal.getText());
                parameter.put("customerName", cbCustomers.getSelectedItem());
                parameter.put("salesman", frmMain.lblWelcome.getText().replace("Welcome", "").replace("as Cashier", ""));
                JasperPrint jprint = JasperFillManager.fillReport(reporte, parameter, new JRBeanCollectionDataSource(lista));
                JasperViewer.viewReport(jprint);

//           JasperDesign jasperDesign = JRXmlLoader.load("");
//            String sql = "Select * from products";
//            JRDesignQuery newQuery = new JRDesignQuery();
//            newQuery.setText(sql);
////            jasperDesign.setQuery(newQuery);
//
////            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
////            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
//            JasperPrint print = JasperFillManager.fillReport("src\\eq\\point\\of\\sale\\system\\eqPrint.jasper", params, datasource);
//
//            JasperViewer.viewReport(print, true);
//            JasperPrintManager.printReport(jasperPrint, false);
                db.Close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public final void GetCustomers() {
        cbCustomers.removeAllItems();
        try {
            DBcon.Open();
            db.SelectCustomers();
            while (rs.next()) {
                cbCustomers.addItem(rs.getString(1) + " " + rs.getString(2));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    Integer EnterQuantity;
    Integer EnterCash_gave;

    private Integer ShowInputDialog() {
        String Quantity = null;
        int Qty = 0;
        try {
            Quantity = JOptionPane.showInputDialog("Please Insert Quantity");
            if (Quantity.isEmpty() || !Quantity.matches("[0-9]*")) {
                JOptionPane.showConfirmDialog(null, "Please Insert Number of Quantity", "Insert Quantity", JOptionPane.YES_NO_OPTION);
                ShowInputDialog();
            }
            Qty = Integer.parseInt(Quantity);
        } catch (NullPointerException e) {
        }
        EnterQuantity = Qty;
        return EnterQuantity;
    }

    private Integer showInputCashGave() {
        String Quantity = null;
        int Qty = 0;
        try {
            Quantity = JOptionPane.showInputDialog("Please Insert Cash Amount");
            if (Quantity.isEmpty() || !Quantity.matches("[0-9]*")) {
                JOptionPane.showConfirmDialog(null, "Please InsertCash Amount", "Insert Cash", JOptionPane.YES_NO_OPTION);
                showInputCashGave();
            }
            Qty = Integer.parseInt(Quantity);
        } catch (NullPointerException e) {
        }
        EnterCash_gave = Qty;
        return EnterCash_gave;
    }

    ArrayList<Integer> ProductArray = new ArrayList<>();
    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        // TODO add your handling code here:
        PlaceOrder();
    }//GEN-LAST:event_btnPlaceOrderActionPerformed
    private void PlaceOrder() {
        try {
            if (cbCustomers.getSelectedIndex() == -1) {
                lblMessage.setText("*Please Select Customer!");
            } else {
                int[] ProductIndex = tblProducs.getSelectedRows();
                TableModel productModel = tblProducs.getModel();
                Object[] row = new Object[11];
                DefaultTableModel model1 = (DefaultTableModel) tblOrders.getModel();
                if (tblProducs.getModel().getRowCount() != 0 && ProductIndex.length == 0) {
                    JOptionPane.showMessageDialog(null, "Plese Select the product you want \n to add.");
                }
                if (tblOrders.getRowCount() >= 18) {
                    JOptionPane.showMessageDialog(null, "TOO MUCH DATA!\n, Maximum of 18 items\nRemove Some products to continue\n If you have additional order create another receipt");

                } else {

                    for (int x = 0; x < ProductIndex.length; x++) {
                        row[1] = productModel.getValueAt(ProductIndex[x], 1);
                        row[2] = productModel.getValueAt(ProductIndex[x], 2);
                        row[3] = productModel.getValueAt(ProductIndex[x], 3);
                        ShowInputDialog();
                        int Stockleft = (int) productModel.getValueAt(ProductIndex[x], 0) - EnterQuantity;
                        Double Total = (Double) row[3] * EnterQuantity;
                        if (Stockleft < 0) {
                            JOptionPane.showMessageDialog(null, "Not Enough Stocks!");
                            break;
                        }
                        if (EnterQuantity == 0) {
                            JOptionPane.showMessageDialog(null, "Please Insert Valid Quantity");
                        } else if (EnterQuantity != 0) {
                            int OrderRowCount = model1.getRowCount();
                            if (OrderRowCount == 0) {
                                model1.addRow(row);
                                model1.setValueAt(EnterQuantity, OrderRowCount, 0);
                                model1.setValueAt(Total, OrderRowCount, 4);
                                productModel.setValueAt(Stockleft, ProductIndex[x], 0);
                                ProductArray.add(ProductIndex[x]);
                                ComputeTotal();
                            } else if (model1.getRowCount() != 0) {
                                boolean Duplicated = false;
                                Double GrandTotal = Double.valueOf(lblTotal.getText());
                                for (int a = 0; a < OrderRowCount; a++) {
                                    if (row[2].equals(model1.getValueAt(a, 2))) {
                                        int GetOrderQty = (int) model1.getValueAt(a, 0);
                                        model1.setValueAt(GetOrderQty + EnterQuantity, a, 0);
                                        int CurrentQty = (int) model1.getValueAt(a, 0);
                                        productModel.setValueAt(Stockleft, ProductIndex[x], 0);
                                        model1.setValueAt(CurrentQty * (Double) model1.getValueAt(a, 3), a, 4);
                                        Duplicated = true;
                                        Double GetOrderPrice = (Double) model1.getValueAt(a, 3);
                                        Double GetNewOrderPrice = GetOrderPrice * EnterQuantity;
                                        GrandTotal = GrandTotal + GetNewOrderPrice;
                                        lblTotal.setText(GrandTotal.toString());
                                    }
                                }
                                if (Duplicated != true) {
                                    model1.addRow(row);
                                    model1.setValueAt(EnterQuantity, OrderRowCount, 0);
                                    model1.setValueAt(Total, OrderRowCount, 4);
                                    productModel.setValueAt(Stockleft, ProductIndex[x], 0);
                                    ProductArray.add(ProductIndex[x]);
                                    ComputeTotal();
                                }
                            }
                        }
                    }
                }
            }
        } catch (HeadlessException | NumberFormatException e) {
        }
    }

    private void ComputeTotal() {
        DefaultTableModel model1 = (DefaultTableModel) tblOrders.getModel();
        Double Total = 0.0;
        Double GrandTotal = Double.valueOf(lblTotal.getText());
        for (int i = 0; i < model1.getRowCount(); i++) {
            Total = (Double) model1.getValueAt(model1.getRowCount() - 1, 4);
        }
        GrandTotal = GrandTotal + Total;
        lblTotal.setText(GrandTotal.toString());
    }

    private void btnNewTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTransactionActionPerformed
        if (tblOrders.getModel().getRowCount() == 0) {
            JOptionPane.showConfirmDialog(null, "You have no recent transaction ", "CANNOT CREATE NEW TRANSACTION!!", JOptionPane.PLAIN_MESSAGE);
        }
        if (tblOrders.getModel().getRowCount() != 0) {
            int NewTransact = JOptionPane.showConfirmDialog(null, "Are you sure you want new Transaction?", "NEW TRANSACTION", JOptionPane.YES_NO_OPTION);
            if (NewTransact == 0) {
                DefaultTableModel dm = (DefaultTableModel) tblOrders.getModel();
                int rowCount = dm.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                    dm.removeRow(i);
                    ProductArray.removeAll(ProductArray);
                }
                RefreshtblProducts();
                JTableProduct();
                lblTotal.setText("0.0");
            }
        }
    }//GEN-LAST:event_btnNewTransactionActionPerformed
    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        try {
            DBcon.Open();
            db.SearchProduct(txtSearch.getText());
            tblProducs.setModel(DbUtils.resultSetToTableModel(rs));
            db.Close();
            JTableProduct();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tblProducsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProducsMouseClicked
        // TODO add your handling code here:

        int row = tblProducs.getSelectedRow();
        Product_ID = tblProducs.getValueAt(row, 0).toString();
        btnPlaceOrder.setEnabled(true);
    }//GEN-LAST:event_tblProducsMouseClicked
    private void btnNewTransaction2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTransaction2ActionPerformed
        Date date = new Date();

        SimpleDateFormat sdfDay = new SimpleDateFormat("yyyy-MM-dd");
        String day = sdfDay.format(date);

        SimpleDateFormat sdfMonth = new SimpleDateFormat("MM");

        String month = sdfMonth.format(date);

        SimpleDateFormat sdfYear = new SimpleDateFormat("YYYY");
        String year = sdfYear.format(date);

        if (tblOrders.getModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please Add products in the order list table!");
        } else if (cbCustomers.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please Select Customer!");
        } else {
            showInputCashGave();
            Double amount = Double.valueOf(lblTotal.getText());
            if (EnterCash_gave == 0 || EnterCash_gave < amount) {
                JOptionPane.showMessageDialog(null, "Not enough Cash");

            } else {

                if (tblOrders.getRowCount() >= 18) {
                    JOptionPane.showMessageDialog(null, "TOO MUCH DATA!\n, Maximum of 18 items\nRemove Some products to continue\n If you have additional order create another receipt");
                } else {
                    int msg = JOptionPane.showConfirmDialog(null, "THIS PROCESS IS CANNOT BE UNDONE \n This will add   " + lblTotal.getText() + "   Points to user \n   " + cbCustomers.getSelectedItem().toString(), "CONFIRM PAYMENT", JOptionPane.YES_NO_OPTION);
                    if (msg == 0) {
                        try {
                            int orderRows = tblOrders.getRowCount();
                            int ProductRows = tblProducs.getRowCount();

                            for (int rows = 0; rows < ProductRows; rows++) {
                                Integer qtyy = (Integer) tblProducs.getValueAt(rows, 0);
                                String desc = (String) tblProducs.getValueAt(rows, 2);
                                DBcon.Open();
                                db.pay(qtyy, desc);
                                db.Close();

                            }
                            DefaultTableModel dm = (DefaultTableModel) tblOrders.getModel();
                            int rowCount = dm.getRowCount();
//                        for (int i = rowCount - 1; i >= 0; i--) {
//                            dm.removeRow(i);
//                            ProductArray.removeAll(ProductArray);
//                        }
                            Double Total = EnterCash_gave - amount;
                            JOptionPane.showMessageDialog(null, "PURCHASE SUCCESS " + "\nCustomer: " + cbCustomers.getSelectedItem() + "\nCash: " + EnterCash_gave + "\nTotal: " + amount + "\nChange: " + Total);
                            RefreshtblProducts();
                            JTableProduct();
                            String custom = String.valueOf(cbCustomers.getSelectedItem());
//                            eqPrint();
                            DBcon.Open();
                            db.CheckPoints(custom);
                            String customers = String.valueOf(cbCustomers.getSelectedItem());

                            for (int row = 0; row < dm.getRowCount(); row++) {
                                int qty = (int) tblOrders.getValueAt(row, 0);
                                String desc = (String) tblOrders.getValueAt(row, 2);
                                db.PayLogs(frmMain.lblWelcome.getText().replace("Welcome", ""), EnterCash_gave, amount, Total, qty, desc, customers);
                            }
                            if (rs.next()) {
                                String Stringpoints = rs.getString(1);
                                Double IntPoints = Double.valueOf(Stringpoints);
                                Double lbltotal = Double.valueOf(lblTotal.getText());
                                Double FinalTotal = IntPoints + lbltotal;
                                db.points(custom, FinalTotal);
                            }
                            db.Close();

                            DBcon.Open();
                            db.getDate(day);
//
                            if (rs.next()) {
                                String reportAmount = reportAmount = rs.getString(2);
                                Double totalAmount = Double.valueOf(reportAmount);
                                Double lblttal = Double.valueOf(lblTotal.getText());
                                Double UltimateTOtal = totalAmount + lblttal;
                                db.updateReportSum(UltimateTOtal, day);

                                db.getYearlyTotal(year);
                                if (rs.next()) {
                                    String stringYearTotal = rs.getString(1);
                                    Double doubleYearTotal = Double.valueOf(stringYearTotal);

                                    db.getMonthlyTotal(month, year);
                                    if (rs.next()) {

                                        String monthly = rs.getString(1);
                                        Double doubleMonthly = Double.valueOf(monthly);
                                        db.updateReportSumFinal(month, year, doubleMonthly, doubleYearTotal);

                                    }

                                }
                                db.Close();
                            } else {
                                System.out.println("else+ doubleYearTotal");
                                db.insertReport(day, amount, month, year, amount);
                                DBcon.Open();
                                db.getDate(day);

                                if (rs.next()) {
                                    String reportAmount = reportAmount = rs.getString(2);
                                    Double totalAmount = Double.valueOf(reportAmount);
                                    Double lblttal = Double.valueOf(lblTotal.getText());
                                    Double UltimateTOtal = totalAmount + lblttal;
                                    db.updateReportSum(UltimateTOtal, day);
                                    db.getYearlyTotal(year);
                                    if (rs.next()) {

                                        String stringYearTotal = rs.getString(1);
                                        Double doubleYearTotal = Double.valueOf(stringYearTotal);
                                        System.out.println(doubleYearTotal);

                                        if (rs.next()) {

                                            String monthly = rs.getString(1);
                                            Double doubleMonthly = Double.valueOf(monthly);
                                            db.updateReportSumFinal(month, year, doubleMonthly, doubleYearTotal);

                                        }
                                        db.Close();
                                    }
                                }
                            }

                            for (int i = rowCount - 1; i >= 0; i--) {
                                dm.removeRow(i);
                                ProductArray.removeAll(ProductArray);
                            }
                            lblTotal.setText("0.0");
                            cbCustomers.setSelectedIndex(-1);

                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_btnNewTransaction2ActionPerformed

    private void btnRemoveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderActionPerformed

        DefaultTableModel tblOrder = (DefaultTableModel) tblOrders.getModel();

        Object OrderRow = new Object();
//        for (int i = 0; i < OrderIndex.length; i++) {
//            tblOrder.removeRow(OrderIndex[i]);
//
//        }
        DefaultTableModel DefaultblOrders = (DefaultTableModel) tblOrders.getModel();
        DefaultTableModel DefaultTblProducts = (DefaultTableModel) tblProducs.getModel();

        int[] ProductIndex = tblProducs.getSelectedRows();
        int[] OrderIndex = tblOrders.getSelectedRows();
        if (tblOrders.getModel().getRowCount() != 0 && OrderIndex.length == 0) {
            JOptionPane.showMessageDialog(null, "Plese Select the product you want \n to remove from the Order List Table.");
        }
        if (tblOrders.getModel().getRowCount() == 0 && OrderIndex.length == 0) {
            JOptionPane.showMessageDialog(null, "Please Place an order before \n removing an order from the Order List Table.");
        }

        Object[] row = new Object[11];
        int sum = 0;
        TableModel productModel = tblProducs.getModel();
        TableModel OrderModel = tblOrders.getModel();
        if (tblOrders.getModel().getRowCount() != 0) {
            for (int x = 0, y = 0; x < OrderIndex.length && y < ProductIndex.length; x++, y++) {

                Integer rr = ProductArray.remove(OrderIndex[x]);

                row[0] = OrderModel.getValueAt(OrderIndex[x], 0);
                row[4] = OrderModel.getValueAt(OrderIndex[x], 4);

                Object OQty = row[0];
                Object tal = row[4];

                String OrderQty = String.valueOf(OQty);
                String Otal = String.valueOf(tal);
                Integer IntOrderQty = Integer.valueOf(OrderQty);

                row[0] = productModel.getValueAt(rr, 0);
                Object PQty = row[0];
                String ProductQty = String.valueOf(PQty);
                Integer IntProductQty = Integer.valueOf(ProductQty);
                sum = IntOrderQty + IntProductQty;

                Double ttal = Double.valueOf(Otal);
                Double lblttal = Double.valueOf(lblTotal.getText());

                Double FinalTotal = lblttal - ttal;
                String q = String.valueOf(FinalTotal);
                lblTotal.setText(q);

                DefaultblOrders.removeRow(OrderIndex[x]);
                DefaultTblProducts.setValueAt(sum, rr, 0);
            }
        }
    }//GEN-LAST:event_btnRemoveOrderActionPerformed

    private void tblProducsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProducsKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            PlaceOrder();
        }
    }//GEN-LAST:event_tblProducsKeyPressed

    private void cbCustomersPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbCustomersPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        lblMessage.setText("");
    }//GEN-LAST:event_cbCustomersPopupMenuWillBecomeInvisible

    private void btnPayLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayLogsActionPerformed
        frmPayLogs log = new frmPayLogs();
        JOptionPane.showConfirmDialog(null, log, "Logs", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnPayLogsActionPerformed

    private void cbCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbCustomersMouseClicked
        cbCustomers.removeAllItems();
        try {
            DBcon.Open();
            db.SelectCustomers();
            while (rs.next()) {
                cbCustomers.addItem(rs.getString(1) + " " + rs.getString(2));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_cbCustomersMouseClicked

    private void cbCustomersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbCustomersMouseEntered

    }//GEN-LAST:event_cbCustomersMouseEntered

    private void cbCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustomersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCustomersActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Buttom;
    private javax.swing.JPanel Center;
    private javax.swing.JPanel Left;
    private javax.swing.JPanel Right;
    private javax.swing.JPanel Top;
    private javax.swing.JButton btnNewTransaction;
    private javax.swing.JButton btnNewTransaction2;
    private javax.swing.JButton btnPayLogs;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JButton btnRemoveOrder;
    public static javax.swing.JComboBox<String> cbCustomers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTable tblProducs;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    public final void RefreshtblProducts() {
        try {
            DBcon.Open();
            db.ReadProducts();
            tblProducs.setModel(DbUtils.resultSetToTableModel(rs));
            db.Close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
}
