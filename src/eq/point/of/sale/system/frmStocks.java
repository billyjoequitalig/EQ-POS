/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eq.point.of.sale.system;

import eq.point.of.sale.system.Comboboxes.ColorComboBox;
import eq.point.of.sale.system.Comboboxes.SubCategoryComboBox;
import eq.point.of.sale.system.Comboboxes.CategoryComboBox;
import eq.point.of.sale.system.Comboboxes.SupplierComboBox;
import eq.point.of.sale.system.Queries.Stocks;
import static eq.point.of.sale.system.Queries.Stocks.rs;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author billy
 */
public class frmStocks extends javax.swing.JPanel {

    Stocks db = new Stocks("localhost", "eqpos", "root", "");
    private frmMain frmMain;
    String Product_ID;

    /**
     * Creates new form frmStocks
     */
    public frmStocks() {
        initComponents();
        cbUnitOfMeasure.setSelectedIndex(-1);
        cbSupplier.setSelectedIndex(-1);
        SetProductID();
        Clear();
        BindComboCat();
        BindComboSupplier();
    }

    public void BindComboCat() {
        try {
            db.Open();
            HashMap<String, Integer> mapcat = populateComboCategory();
            mapcat.keySet().stream().map((c) -> {
                cbCategory.addItem(c);
                return c;
            }).forEachOrdered((c) -> {
                cbCategorySort.addItem(c);
            });
            db.Close();
        } catch (SQLException e) {
        }
    }

    public void BindComboSupplier() {
        try {
            db.Open();
            HashMap<String, Integer> mapsup = populateComboSupplier();
            mapsup.keySet().forEach((c) -> {
                cbSupplier.addItem(c);
            });
            db.Close();
        } catch (SQLException e) {
        }
    }

    public void BindComboAcc() {
        try {
            db.Open();
            HashMap<String, Integer> mapacc = populateComboAccessories();
            mapacc.keySet().stream().map((a) -> {
                cbSubCategory.addItem(a);
                return a;
            }).forEachOrdered((a) -> {
                cbSubCategorySort.addItem(a);
            });
            db.Close();
        } catch (SQLException e) {
        }
    }

    public void BindComboSec() {
        try {
            db.Open();
            HashMap<String, Integer> mapsec = populateComboSection();
            mapsec.keySet().stream().map((b) -> {
                cbSubCategory.addItem(b);
                return b;
            }).forEachOrdered((b) -> {
                cbSubCategorySort.addItem(b);
            });
            db.Close();
        } catch (SQLException e) {
        }
    }

    public void BindComboColorSection() {
        try {
            db.Open();
            HashMap<String, Integer> mapsec = populateComboColorSection();
            mapsec.keySet().forEach((b) -> {
                cbColor.addItem(b);
            });
            db.Close();
        } catch (SQLException e) {
        }
    }

    public void BindComboColorAccessories() {
        try {
            db.Open();
            HashMap<String, Integer> mapacc = populateComboColorAccessories();
            mapacc.keySet().forEach((b) -> {
                cbColor.addItem(b);
            });
            db.Close();
        } catch (SQLException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Right = new javax.swing.JPanel();
        Left = new javax.swing.JPanel();
        Buttom = new javax.swing.JPanel();
        Top = new javax.swing.JPanel();
        Center = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtProductID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProduct = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        cbSupplier = new javax.swing.JComboBox<>();
        btnAddQuantity = new javax.swing.JButton();
        btnSubtractQuantity = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        cbUnitOfMeasure = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbCategory = new javax.swing.JComboBox<>();
        lblCategory = new javax.swing.JLabel();
        cbSubCategory = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        cbColor = new javax.swing.JComboBox<>();
        btnAddSubCat = new javax.swing.JButton();
        btnDeleteSubCat = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        cbCategorySort = new javax.swing.JComboBox<>();
        cbSubCategorySort = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnLogs = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout RightLayout = new javax.swing.GroupLayout(Right);
        Right.setLayout(RightLayout);
        RightLayout.setHorizontalGroup(
            RightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        RightLayout.setVerticalGroup(
            RightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        jPanel1.add(Right, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout LeftLayout = new javax.swing.GroupLayout(Left);
        Left.setLayout(LeftLayout);
        LeftLayout.setHorizontalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        LeftLayout.setVerticalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        jPanel1.add(Left, java.awt.BorderLayout.LINE_START);

        Buttom.setPreferredSize(new java.awt.Dimension(1187, 35));

        javax.swing.GroupLayout ButtomLayout = new javax.swing.GroupLayout(Buttom);
        Buttom.setLayout(ButtomLayout);
        ButtomLayout.setHorizontalGroup(
            ButtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1369, Short.MAX_VALUE)
        );
        ButtomLayout.setVerticalGroup(
            ButtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        jPanel1.add(Buttom, java.awt.BorderLayout.PAGE_END);

        Top.setPreferredSize(new java.awt.Dimension(1353, 35));

        javax.swing.GroupLayout TopLayout = new javax.swing.GroupLayout(Top);
        Top.setLayout(TopLayout);
        TopLayout.setHorizontalGroup(
            TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1369, Short.MAX_VALUE)
        );
        TopLayout.setVerticalGroup(
            TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        jPanel1.add(Top, java.awt.BorderLayout.PAGE_START);

        tblProducts.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProducts.setRowHeight(30);
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducts);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setText("Product ID:");

        txtProductID.setEditable(false);
        txtProductID.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setText("Supplier:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setText("Product Name:");

        txtProduct.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setText("Size :");

        txtSize.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        txtQuantity.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQuantityKeyTyped(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel14.setText("Quantity :");

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel10.setText("Unit Price :");

        txtUnitPrice.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txtUnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUnitPriceKeyTyped(evt);
            }
        });

        cbSupplier.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        btnAddQuantity.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnAddQuantity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Add1 24 pixel.png"))); // NOI18N
        btnAddQuantity.setToolTipText("Add Quantity");
        btnAddQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddQuantityActionPerformed(evt);
            }
        });

        btnSubtractQuantity.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnSubtractQuantity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Delete(Subtract) 24pixel.png"))); // NOI18N
        btnSubtractQuantity.setToolTipText("Subtract Quantity");
        btnSubtractQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubtractQuantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSize)
                    .addComponent(txtProductID)
                    .addComponent(txtProduct)
                    .addComponent(cbSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSubtractQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtUnitPrice))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnSubtractQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(txtUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel11.setText("Unit of Measure :");

        cbUnitOfMeasure.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        cbUnitOfMeasure.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Box", "Gross", "Inch", "Kilo", "Meter", "Pcs", "Pack", "Roll", "Yard" }));
        cbUnitOfMeasure.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cbUnitOfMeasurePopupMenuWillBecomeVisible(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setText("Section/Accessories :");

        cbCategory.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        cbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoryActionPerformed(evt);
            }
        });

        lblCategory.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblCategory.setText("Accessories:");

        cbSubCategory.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel9.setText("Color:");

        cbColor.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        btnAddSubCat.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnAddSubCat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Add1 24 pixel.png"))); // NOI18N
        btnAddSubCat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddSubCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSubCatActionPerformed(evt);
            }
        });

        btnDeleteSubCat.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnDeleteSubCat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Delete(Subtract) 24pixel.png"))); // NOI18N
        btnDeleteSubCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSubCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbUnitOfMeasure, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddSubCat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteSubCat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteSubCat, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cbUnitOfMeasure, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddSubCat, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCategory)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbColor, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnNew.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Add.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Update.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Delete.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SystemIcons/Clear.png"))); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        cbCategorySort.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        cbCategorySort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategorySortActionPerformed(evt);
            }
        });

        cbSubCategorySort.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        cbSubCategorySort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSubCategorySortActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Search :");

        txtSearch.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnLogs.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        btnLogs.setText("History Logs");
        btnLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCategorySort, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSubCategorySort, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(205, 205, 205))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbCategorySort, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbSubCategorySort, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout CenterLayout = new javax.swing.GroupLayout(Center);
        Center.setLayout(CenterLayout);
        CenterLayout.setHorizontalGroup(
            CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(CenterLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CenterLayout.setVerticalGroup(
            CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CenterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(Center, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    String SubCategory;
    String Quantity;

    private String ShowInputDialogSubCategory() throws SQLException {
        //Add SubCategory Input Dialog
        HashMap<String, Integer> cat = populateComboCategory();
        String Category = cat.get(cbCategory.getSelectedItem().toString()).toString();
        try {
            SubCategory = JOptionPane.showInputDialog("Add New " + lblCategory.getText());
            if (SubCategory.isEmpty()) {
                JOptionPane.showConfirmDialog(null, "Enter New " + lblCategory.getText(), "Invalid!", ERROR_MESSAGE);
                ShowInputDialogSubCategory();
            } else {
                db.Open();
                db.SelectSubCategoryExist(SubCategory);
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "This " + SubCategory + " is Already Exist!", "Invalid!", ERROR_MESSAGE);
                    db.Close();
                    ShowInputDialogSubCategory();
                } else {
                    db.Open();
                    db.InsertSubCategory(Category, SubCategory);
                    int msg = JOptionPane.showConfirmDialog(null, "Successfully " + SubCategory + " Added! Do You Want Add More Section??", "Message", JOptionPane.YES_NO_OPTION);
                    db.Close();
                    if (msg == 0) {
                        if ("1".equals(Category)) {
                            cbSubCategory.removeAllItems();
                            BindComboAcc();
                            ShowInputDialogSubCategory();
                        } else if ("2".equals(Category)) {
                            db.Close();
                            cbSubCategory.removeAllItems();
                            BindComboSec();
                            ShowInputDialogSubCategory();
                        }
                    } else if (msg == 1) {
                        if ("1".equals(Category)) {
                            cbSubCategory.removeAllItems();
                            BindComboAcc();
                        } else if ("2".equals(Category)) {
                            cbSubCategory.removeAllItems();
                            BindComboSec();
                        }
                        db.Close();
                    }
                    db.Close();
                }
            }

        } catch (HeadlessException | SQLException | NullPointerException e) {
        }
        return SubCategory;
    }

    private String ShowInputDialogAddQuantity() throws SQLException, NullPointerException {
        //Add Quantity Input Dialog
        try {
            String dialog = JOptionPane.showInputDialog("Add Quantity:");
            Pattern p = Pattern.compile("[A-Z,a-z,&%$#@!()*^<>?/{}:,.;{}_~`']");
            Matcher m = p.matcher(dialog);
            if (dialog.equals("0")) {
                JOptionPane.showMessageDialog(null, "Enter Number of New Stock!", "Invalid!", ERROR_MESSAGE);
                ShowInputDialogAddQuantity();
            } else if (m.find()) {
                JOptionPane.showMessageDialog(null, "Input Numbers Only!", "Invalid!", ERROR_MESSAGE);
                ShowInputDialogAddQuantity();
            } else {
                int Quantity = Integer.valueOf(dialog);
                int a = Quantity;
                int b = Integer.valueOf(txtQuantity.getText());
                int c = b + a;
                String d = String.valueOf(c);
                if (a < 0) {
                    JOptionPane.showMessageDialog(null, "Not Valid Number", "Invalid!", ERROR_MESSAGE);
                    ShowInputDialogAddQuantity();
                } else if (a >= 0) {
                    db.Open();
                    db.QuantitySum(txtProductID.getText(), txtQuantity.getText(), Quantity);
                    int msg = JOptionPane.showConfirmDialog(null, "Successfully Quantity Added!", "Message", JOptionPane.YES_NO_OPTION);
                    db.Close();
                    RefreshProducts();
                    txtQuantity.setText(d);
                }
            }
        } catch (HeadlessException | SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Input Numbers Only!", "Invalid!", ERROR_MESSAGE);
            ShowInputDialogAddQuantity();
        } catch (NullPointerException e) {
        }
        return Quantity;
    }

    private String ShowInputDialogSubtractQuantity() throws SQLException {
        //Input Dialog Subtract Quantity
        try {
            Quantity = JOptionPane.showInputDialog("Subtract Quantity:");
            Pattern p = Pattern.compile("[A-Z,a-z,&%$#@!()*^]");
            Matcher m = p.matcher(Quantity);
            if (Quantity.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter Number of Stock to Subtract!", "Invalid!", ERROR_MESSAGE);
                ShowInputDialogSubtractQuantity();
            } else if (m.find()) {
                JOptionPane.showMessageDialog(null, "Input Numbers Only!", "Invalid!", ERROR_MESSAGE);
                ShowInputDialogSubtractQuantity();
            } else {
                int a = Integer.valueOf(Quantity);
                int b = Integer.valueOf(txtQuantity.getText());
                int c = b - a;
                String d = String.valueOf(c);
                if (a > b) {
                    JOptionPane.showMessageDialog(null, "Your Stock has only " + b + " ,Please Lower the Number to Subtract!", "Invalid!", ERROR_MESSAGE);
                    ShowInputDialogSubtractQuantity();
                } else if (0 >= a) {
                    JOptionPane.showMessageDialog(null, "Not Valid Number!", "Invalid!", ERROR_MESSAGE);
                    ShowInputDialogSubtractQuantity();
                } else {
                    db.Open();
                    db.QuantitySubtract(txtProductID.getText(), txtQuantity.getText(), Quantity);
                    int msg = JOptionPane.showConfirmDialog(null, "Successfully Quantity Subtracted!", "Message", JOptionPane.YES_NO_OPTION);
                    db.Close();
                    RefreshProducts();
                    txtQuantity.setText(d);
                }
            }
        } catch (HeadlessException | SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Input Numbers Only!", "Invalid!", ERROR_MESSAGE);
            ShowInputDialogSubtractQuantity();
        } catch (NullPointerException e) {
        }
        return Quantity;
    }

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //Clear Button
        Clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //Delete Product
        int Confirm = JOptionPane.showConfirmDialog(null, "Are You Sure You want to Delete This Product?", "DELETE PRODUCT", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
        if (Confirm == 0) {
            try {
                db.Open();
                db.DeleteProduct(txtProductID.getText());
                db.Close();
                db.Open();
                db.DeleteStocksLogs(frmMain.lblWelcome.getText().replace("Welcome", ""), txtProductID.getText(), txtProduct.getText(), cbSupplier.getSelectedItem().toString(), cbUnitOfMeasure.getSelectedItem().toString(), txtSize.getText(), cbCategory.getSelectedItem().toString(), cbSubCategory.getSelectedItem().toString(), cbColor.getSelectedItem().toString(), txtUnitPrice.getText(), txtQuantity.getText());
                db.Close();
                Clear();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(Center, e);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //Update Product
        HashMap<String, Integer> cat = populateComboCategory();
        String Category = cat.get(cbCategory.getSelectedItem().toString()).toString();
        HashMap<String, Integer> sup = populateComboSupplier();
        String Supplier = sup.get(cbSupplier.getSelectedItem().toString()).toString();
        if (txtProduct.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Product Name!");
        } else if (txtQuantity.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Quantity!");
        } else if (txtUnitPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Insert Unit Price");
        } else if (cbUnitOfMeasure.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please Choose Unit Measure!");
        } else {
            int Confirm = JOptionPane.showConfirmDialog(null, "Are You Sure You want to Update This Product?", "UPDATE PRODUCT", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (Confirm == 0) {
                if (Category.equals("1")) {
                    HashMap<String, Integer> coloracc = populateComboColorAccessories();
                    String ColorAccessories = coloracc.get(cbColor.getSelectedItem().toString()).toString();
                    try {
                        db.Open();
                        db.SelectProductExist(txtProduct.getText(), txtSize.getText(), cbUnitOfMeasure.getSelectedItem().toString(), ColorAccessories, txtProductID.getText());
                        if (rs.next()) {
                            JOptionPane.showMessageDialog(null, "This Product is already Exist!");
                            db.Close();
                        } else {
                            db.Open();
                            HashMap<String, Integer> acc = populateComboAccessories();
                            String Accessories = acc.get(cbSubCategory.getSelectedItem().toString()).toString();
                            db.UpdateProducts(txtProductID.getText(), txtProduct.getText(), Supplier, cbUnitOfMeasure.getSelectedItem().toString(), txtQuantity.getText(), txtSize.getText(), Category, Accessories, ColorAccessories, txtUnitPrice.getText(), cbColor.getSelectedItem().toString());
                            db.Close();
                            db.Open();
                            db.UpdateStocksLogs(frmMain.lblWelcome.getText().replace("Welcome", ""), txtProductID.getText(), txtProduct.getText(), cbSupplier.getSelectedItem().toString(), cbUnitOfMeasure.getSelectedItem().toString(), txtSize.getText(), cbCategory.getSelectedItem().toString(), cbSubCategory.getSelectedItem().toString(), cbColor.getSelectedItem().toString(), txtUnitPrice.getText(), txtQuantity.getText());
                            JOptionPane.showMessageDialog(null, "Successfully Product Update! Accessories");
                            db.Close();
                            Clear();
                            RefreshProducts();
                            SetProductID();
                            new frmPointOfSale().RefreshtblProducts();
                        }
                    } catch (HeadlessException | SQLException | NullPointerException e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                } else {
                    try {
                        HashMap<String, Integer> colorsec = populateComboColorSection();
                        String ColorSection = colorsec.get(cbColor.getSelectedItem().toString()).toString();
                        db.Open();
                        db.SelectProductExist(txtProduct.getText(), txtSize.getText(), cbUnitOfMeasure.getSelectedItem().toString(), ColorSection, txtProductID.getText());
                        if (rs.next()) {
                            JOptionPane.showMessageDialog(null, "This Product is already Exist!");
                            db.Close();
                        } else {
                            db.Open();
                            HashMap<String, Integer> sec = populateComboSection();
                            String Section = sec.get(cbSubCategory.getSelectedItem().toString()).toString();
                            db.UpdateProducts(txtProductID.getText(), txtProduct.getText(), Supplier, cbUnitOfMeasure.getSelectedItem().toString(), txtQuantity.getText(), txtSize.getText(), Category, Section, ColorSection, txtUnitPrice.getText(), cbColor.getSelectedItem().toString());
                            db.Close();
                            db.Open();
                            db.UpdateStocksLogs(frmMain.lblWelcome.getText().replace("Welcome", ""), txtProductID.getText(), txtProduct.getText(), cbSupplier.getSelectedItem().toString(), cbUnitOfMeasure.getSelectedItem().toString(), txtSize.getText(), cbCategory.getSelectedItem().toString(), cbSubCategory.getSelectedItem().toString(), cbColor.getSelectedItem().toString(), txtUnitPrice.getText(), txtQuantity.getText());
                            JOptionPane.showMessageDialog(null, "Successfully Product Update! Section");
                            db.Close();
                            RefreshProducts();
                            SetProductID();
                            Clear();
                            new frmPointOfSale().RefreshtblProducts();
                        }
                    } catch (HeadlessException | SQLException | NullPointerException e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        //Add Product
        HashMap<String, Integer> cat = populateComboCategory();
        String Category = cat.get(cbCategory.getSelectedItem().toString()).toString();
        HashMap<String, Integer> sup = populateComboSupplier();
        String Supplier = sup.get(cbSupplier.getSelectedItem().toString()).toString();
        if (txtProduct.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Product Name!");
        } else if (txtQuantity.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Quantity!");
        } else if (txtUnitPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Insert Unit Price");
        } else if (cbUnitOfMeasure.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please Choose Unit Measure!");
        } else if (cbSubCategory.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please Choose Section/Accessories!");
        } else if (cbColor.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please Choose Color!");
        } else if (Category.equals("1")) {
            HashMap<String, Integer> coloracc = populateComboColorAccessories();
            String ColorAccessories = coloracc.get(cbColor.getSelectedItem().toString()).toString();
            try {
                db.Open();
                db.SelectProductExist(txtProduct.getText(), txtSize.getText(), cbUnitOfMeasure.getSelectedItem().toString(), ColorAccessories, txtProductID.getText());
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "This Product is already Exist!");
                    db.Close();
                } else {
                    db.Open();
                    HashMap<String, Integer> acc = populateComboAccessories();
                    String Accessories = acc.get(cbSubCategory.getSelectedItem().toString()).toString();
                    db.InsertProduct(txtProductID.getText(), Supplier, txtProduct.getText(), txtSize.getText(), txtQuantity.getText(), txtUnitPrice.getText(), cbUnitOfMeasure.getSelectedItem().toString(), Category, Accessories, ColorAccessories, cbColor.getSelectedItem().toString());
                    db.Close();
                    db.Open();
                    db.NewStocksLogs(frmMain.lblWelcome.getText().replace("Welcome", ""), txtProductID.getText(), txtProduct.getText(), cbSupplier.getSelectedItem().toString(), cbUnitOfMeasure.getSelectedItem().toString(), txtSize.getText(), cbCategory.getSelectedItem().toString(), cbSubCategory.getSelectedItem().toString(), cbColor.getSelectedItem().toString(), txtUnitPrice.getText(), txtQuantity.getText());
                    JOptionPane.showMessageDialog(null, "Successfully Product Added!");
                    db.Close();
                    RefreshProducts();
                    SetProductID();
                    Clear();
                }
            } catch (HeadlessException | SQLException | NullPointerException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            try {
                HashMap<String, Integer> colorsec = populateComboColorSection();
                String ColorSection = colorsec.get(cbColor.getSelectedItem().toString()).toString();
                db.Open();
                db.SelectProductExist(txtProduct.getText(), txtSize.getText(), cbUnitOfMeasure.getSelectedItem().toString(), ColorSection, txtProductID.getText());
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "This Product is already Exist!");
                    db.Close();
                } else {
                    db.Open();
                    HashMap<String, Integer> sec = populateComboSection();
                    String Section = sec.get(cbSubCategory.getSelectedItem().toString()).toString();
                    db.InsertProduct(txtProductID.getText(), Supplier, txtProduct.getText(), txtSize.getText(), txtQuantity.getText(), txtUnitPrice.getText(), cbUnitOfMeasure.getSelectedItem().toString(), Category, Section, ColorSection, cbColor.getSelectedItem().toString());
                    db.Close();
                    db.Open();
                    db.NewStocksLogs(frmMain.lblWelcome.getText().replace("Welcome", ""), txtProductID.getText(), txtProduct.getText(), cbSupplier.getSelectedItem().toString(), cbUnitOfMeasure.getSelectedItem().toString(), txtSize.getText(), cbCategory.getSelectedItem().toString(), cbSubCategory.getSelectedItem().toString(), cbColor.getSelectedItem().toString(), txtUnitPrice.getText(), txtQuantity.getText());
                    JOptionPane.showMessageDialog(null, "Successfully Product Added!");
                    db.Close();
                    RefreshProducts();
                    SetProductID();
                    Clear();
                }
            } catch (HeadlessException | SQLException | NullPointerException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void cbUnitOfMeasurePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbUnitOfMeasurePopupMenuWillBecomeVisible
        // TODO add your handling code here:
        cbUnitOfMeasure.setSelectedIndex(-1);
    }//GEN-LAST:event_cbUnitOfMeasurePopupMenuWillBecomeVisible

    private void txtQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtQuantityKeyTyped

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        //Search Product
        try {
            db.Open();
            db.SearchProducts(txtSearch.getText());
            tblProducts.setModel(DbUtils.resultSetToTableModel(rs));
            db.Close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductsMouseClicked
        //Table Mouse Click
        try {
            int row = tblProducts.getSelectedRow();
            Product_ID = tblProducts.getValueAt(row, 0).toString();
            txtProductID.setText(Product_ID);
            cbSupplier.setSelectedItem(tblProducts.getValueAt(row, 2).toString());
            txtProduct.setText(tblProducts.getValueAt(row, 1).toString());
            cbUnitOfMeasure.setSelectedItem(tblProducts.getValueAt(row, 3).toString());
            txtQuantity.setText(tblProducts.getValueAt(row, 4).toString());
            txtSize.setText(tblProducts.getValueAt(row, 5).toString());
            cbCategory.setSelectedItem(tblProducts.getValueAt(row, 6));
            cbSubCategory.setSelectedItem(tblProducts.getValueAt(row, 7));
            cbColor.setSelectedItem(tblProducts.getValueAt(row, 8));
            txtUnitPrice.setText(tblProducts.getValueAt(row, 9).toString());
        } catch (Exception e) {
            cbColor.setSelectedIndex(-1);
            cbUnitOfMeasure.setSelectedIndex(-1);
        }
        btnNew.setEnabled(false);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
        btnAddQuantity.setEnabled(true);
        btnSubtractQuantity.setEnabled(true);
        txtQuantity.setEnabled(false);
    }//GEN-LAST:event_tblProductsMouseClicked

    private void btnAddQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddQuantityActionPerformed
        //Pop up the ShowInputDialogAddQuantity
        try {
            ShowInputDialogAddQuantity();
        } catch (SQLException ex) {
            Logger.getLogger(frmStocks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddQuantityActionPerformed

    private void btnAddSubCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSubCatActionPerformed
        //Pop up the ShowInputDialogSubCategory
        try {
            ShowInputDialogSubCategory();
        } catch (SQLException ex) {
            Logger.getLogger(frmStocks.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddSubCatActionPerformed

    private void cbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoryActionPerformed
        try {
            db.Open();
            HashMap<String, Integer> cat = populateComboCategory();
            String category = cat.get(cbCategory.getSelectedItem().toString()).toString();
            db.Close();
            switch (category) {
                case "1":
                    btnAddSubCat.setEnabled(true);
                    btnDeleteSubCat.setEnabled(true);
                    lblCategory.setText("Accessories: ");
                    cbSubCategory.removeAllItems();
                    cbColor.removeAllItems();
                    BindComboAcc();
                    BindComboColorAccessories();
                    btnAddSubCat.setToolTipText("Add Accessories");
                    btnDeleteSubCat.setToolTipText("Delete Accessories");
                    break;
                case "2":
                    btnAddSubCat.setEnabled(true);
                    btnDeleteSubCat.setEnabled(true);
                    lblCategory.setText("Section: ");
                    cbSubCategory.removeAllItems();
                    cbColor.removeAllItems();
                    BindComboSec();
                    BindComboColorSection();
                    btnAddSubCat.setToolTipText("Add Section");
                    btnDeleteSubCat.setToolTipText("Delete Section");
                    break;
                default:
                    lblCategory.setText("");
                    cbSubCategory.setEnabled(false);
                    break;
            }
        } catch (HeadlessException | SQLException | NullPointerException e) {
        }
    }//GEN-LAST:event_cbCategoryActionPerformed

    private void btnDeleteSubCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSubCatActionPerformed
        //Delete Selected SubCategory
        if ("Accessories: ".equals(lblCategory.getText())) {
            HashMap<String, Integer> acc = populateComboAccessories();
            String Accessories = acc.get(cbSubCategory.getSelectedItem().toString()).toString();
            int Confirm = JOptionPane.showConfirmDialog(null, "Are You Sure You want to Delete This " + cbSubCategory.getSelectedItem() + "?", "DELETE", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (Confirm == 0) {
                try {
                    db.Open();
                    db.DeleteSubCategory(Accessories);
                    db.Close();
                    cbSubCategory.removeAllItems();
                    BindComboAcc();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(Center, e);
                }
            }
        } else if ("Section: ".equals(lblCategory.getText())) {
            HashMap<String, Integer> sec = populateComboSection();
            String Section = sec.get(cbSubCategory.getSelectedItem().toString()).toString();
            int Confirm = JOptionPane.showConfirmDialog(null, "Are You Sure You want to Delete This " + cbSubCategory.getSelectedItem() + "?", "DELETE", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (Confirm == 0) {
                try {
                    db.Open();
                    db.DeleteSubCategory(Section);
                    db.Close();
                    cbSubCategory.removeAllItems();
                    BindComboSec();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(Center, e);
                }
            }
        }
    }//GEN-LAST:event_btnDeleteSubCatActionPerformed

    private void cbCategorySortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategorySortActionPerformed
        //Sort By Category
        try {
            db.Open();
            HashMap<String, Integer> cat = populateComboCategory();
            String category = cat.get(cbCategorySort.getSelectedItem().toString()).toString();
            db.Close();
            if ("1".equals(category)) {
                cbSubCategorySort.removeAllItems();
                cbSubCategory.removeAllItems();
                RefreshProducts();
                BindComboAcc();
                db.Open();
                db.SortProduct(category);
                tblProducts.setModel(DbUtils.resultSetToTableModel(rs));
                db.Close();
            } else {
                cbSubCategorySort.removeAllItems();
                cbSubCategory.removeAllItems();
                RefreshProducts();
                BindComboSec();
                db.Open();
                db.SortProduct(category);
                tblProducts.setModel(DbUtils.resultSetToTableModel(rs));
                db.Close();
            }
        } catch (HeadlessException | SQLException | NullPointerException e) {
        }
    }//GEN-LAST:event_cbCategorySortActionPerformed

    private void cbSubCategorySortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSubCategorySortActionPerformed
        //Sort By SubCategory
        try {
            db.Open();
            HashMap<String, Integer> cat = populateComboCategory();
            String category = cat.get(cbCategorySort.getSelectedItem().toString()).toString();
            db.Close();
            if ("1".equals(category)) {
                HashMap<String, Integer> acc = populateComboAccessories();
                String Accessories = acc.get(cbSubCategorySort.getSelectedItem().toString()).toString();
                db.Open();
                db.ReadSubCategorySort(Accessories);
                tblProducts.setModel(DbUtils.resultSetToTableModel(rs));
                db.Close();
            } else {
                HashMap<String, Integer> sec = populateComboSection();
                String Section = sec.get(cbSubCategorySort.getSelectedItem().toString()).toString();
                db.Open();
                db.ReadSubCategorySort(Section);
                tblProducts.setModel(DbUtils.resultSetToTableModel(rs));
                db.Close();
            }
        } catch (HeadlessException | SQLException | NullPointerException e) {
        }
    }//GEN-LAST:event_cbSubCategorySortActionPerformed

    private void btnLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogsActionPerformed
        //Popup frmAddStocksLog
        frmAddStocksLog log = new frmAddStocksLog();
        JOptionPane.showConfirmDialog(null, log, "Logs", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnLogsActionPerformed

    private void btnSubtractQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubtractQuantityActionPerformed
        //Pop up the ShowInputDialogAddQuantity
        try {
            ShowInputDialogSubtractQuantity();
        } catch (SQLException ex) {
            Logger.getLogger(frmStocks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSubtractQuantityActionPerformed

    private void txtUnitPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitPriceKeyTyped
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtUnitPriceKeyTyped

    private void SetProductID() {
        String IDStart = "10000";
        Date date = new Date();
        SimpleDateFormat YearFormat = new SimpleDateFormat("yy");
        Integer Year = Integer.parseInt(YearFormat.format(date));
        try {
            db.Open();
            db.SelectMaxID();
            if (rs.next()) {
                if (rs.getString(1) == null) {
                    txtProductID.setText(Year + IDStart);
                } else {
                    String Substring = rs.getString(1).substring(2, 7);
                    Integer ID = Integer.parseInt(Substring) + 1;
                    txtProductID.setText(Year.toString() + ID.toString());
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(Center, e);
        }
    }

    public void Clear() {
        Product_ID = "";
        txtProduct.setText("");
        cbUnitOfMeasure.setSelectedIndex(-1);
        txtSize.setText("");
        txtQuantity.setText("");
        txtUnitPrice.setText("");
        tblProducts.clearSelection();
        tblProducts.setDefaultEditor(Object.class, null);
        btnDelete.setEnabled(false);
        txtQuantity.setEnabled(true);
        btnNew.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnAddQuantity.setEnabled(false);
        btnSubtractQuantity.setEnabled(false);
        btnAddSubCat.setEnabled(false);
        btnDeleteSubCat.setEnabled(false);
        cbSubCategory.removeAllItems();
        cbColor.removeAllItems();
        lblCategory.setText("");
        txtSearch.setText("");
        RefreshProducts();
        SetProductID();
    }

    public final JTable RefreshProducts() {
        try {
            db.Open();
            db.ReadProducts();
            tblProducts.setModel(DbUtils.resultSetToTableModel(rs));
            db.Close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e);
        }
        return tblProducts;
    }

    public HashMap<String, Integer> populateComboSupplier() {
        HashMap<String, Integer> map = new HashMap<>();
        try {
            db.Open();
            db.ReadSupplier();
            SupplierComboBox scb;
            while (rs.next()) {
                scb = new SupplierComboBox(rs.getInt(1), rs.getString(2));
                map.put(scb.getSup(), scb.getSupId());
            }
        } catch (SQLException e) {
        }
        return map;
    }

    public HashMap<String, Integer> populateComboCategory() {
        HashMap<String, Integer> map = new HashMap<>();
        try {
            db.Open();
            db.ReadCategory();
            CategoryComboBox ccb;
            while (rs.next()) {
                ccb = new CategoryComboBox(rs.getInt(1), rs.getString(2));
                map.put(ccb.getCat(), ccb.getCatId());
            }
        } catch (SQLException e) {
        }
        return map;
    }

    public HashMap<String, Integer> populateComboAccessories() {
        HashMap<String, Integer> map = new HashMap<>();
        try {
            db.Open();
            db.ReadAccessories();
            SubCategoryComboBox sccb;
            while (rs.next()) {
                sccb = new SubCategoryComboBox(rs.getInt(1), rs.getString(2));
                map.put(sccb.getSubCat(), sccb.getSubCatId());
            }
        } catch (SQLException e) {
        }
        return map;
    }

    public HashMap<String, Integer> populateComboSection() {
        HashMap<String, Integer> map = new HashMap<>();
        try {
            db.Open();
            db.ReadSection();
            SubCategoryComboBox sccb;
            while (rs.next()) {
                sccb = new SubCategoryComboBox(rs.getInt(1), rs.getString(2));
                map.put(sccb.getSubCat(), sccb.getSubCatId());
            }
        } catch (SQLException e) {
        }
        return map;
    }

    public HashMap<String, Integer> populateComboColorAccessories() {
        HashMap<String, Integer> map = new HashMap<>();
        try {
            db.Open();
            db.SelectColorAccessories();
            ColorComboBox ccb;
            while (rs.next()) {
                ccb = new ColorComboBox(rs.getInt(1), rs.getString(2));
                map.put(ccb.getColor(), ccb.getColorId());
            }
        } catch (SQLException e) {
        }
        return map;
    }

    public HashMap<String, Integer> populateComboColorSection() {
        HashMap<String, Integer> map = new HashMap<>();
        try {
            db.Open();
            db.SelectColorSection();
            ColorComboBox sccb;
            while (rs.next()) {
                sccb = new ColorComboBox(rs.getInt(1), rs.getString(2));
                map.put(sccb.getColor(), sccb.getColorId());
            }
        } catch (SQLException e) {
        }
        return map;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Buttom;
    private javax.swing.JPanel Center;
    private javax.swing.JPanel Left;
    private javax.swing.JPanel Right;
    private javax.swing.JPanel Top;
    public static javax.swing.JButton btnAddQuantity;
    public static javax.swing.JButton btnAddSubCat;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    public static javax.swing.JButton btnDeleteSubCat;
    private javax.swing.JButton btnLogs;
    private javax.swing.JButton btnNew;
    public static javax.swing.JButton btnSubtractQuantity;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JComboBox<String> cbCategorySort;
    public static javax.swing.JComboBox<String> cbColor;
    public static javax.swing.JComboBox<String> cbSubCategory;
    private javax.swing.JComboBox<String> cbSubCategorySort;
    private javax.swing.JComboBox<String> cbSupplier;
    private javax.swing.JComboBox<String> cbUnitOfMeasure;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JLabel lblCategory;
    public static javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtProduct;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSize;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables

}
